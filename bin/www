#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("webcam-exam-backend:server");
var http = require("http");
const socket = require("socket.io");
var cv = require("opencv4nodejs");

const drawRect = (image, rect, color, opts = { thickness: 2 }) =>
  image.drawRectangle(rect, color, opts.thickness, cv.LINE_8);

const drawBlueRect = (image, rect, opts = { thickness: 2 }) =>
  drawRect(image, rect, new cv.Vec(255, 0, 0), opts);

const performValidation = (imag) => {
  if (!imag) {
    return {
      is_face_detected: false,
      no_of_faces: 0,
      confidences: null,
    };
  }
  const base64text = imag;
  const base64data = base64text
    .replace("data:image/jpeg;base64", "")
    .replace("data:image/png;base64", "");
  const buffer = Buffer.from(base64data, "base64");
  const image = cv.imdecode(buffer);
  const classifier = new cv.CascadeClassifier(cv.HAAR_FRONTALFACE_ALT2);
  // detect faces
  const { objects, numDetections } = classifier.detectMultiScale(
    image.bgrToGray()
  );
  // draw detection
  const numDetectionsTh = 10;
  objects.forEach((rect, i) => {
    const thickness = numDetections[i] < numDetectionsTh ? 1 : 2;
    drawBlueRect(image, rect, { thickness });
  });
  return {
    is_face_detected: objects.length ? true : false,
    no_of_faces: objects.length,
    confidences: numDetections[0],
  };
};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
let io = socket(server);
io.on("connection", (sock) => {
  console.log("Socket conected to server");
  sock.on("validate-image", (image) => {
    const validation = performValidation(image.imageSrc);
    io.sockets.emit(image.user_id, validation);
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
